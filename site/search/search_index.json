{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Copilot Camp","text":""},{"location":"pages/api-plugin/","title":"Welcome to Copilot Camp's Path A1: Extend Copilot for Microsoft 365","text":"<p>During Path A of the Copilot Camp, learners will construct a customised assistant tailored for a Human Resource department. The process will begin with the creation of a basic declarative Copilot and progress towards developing fully skilled assistant. This advanced assistant will be equipped with security features, including authentication mechanism linked to the Microsoft 365 tenant to get orgnaisational data.</p> Here are the labs <ul> <li>Lab 00 - Prerequisites In this lab, you'll set your environment to build plugins and other extensions.</li> </ul> <p>Start here  with Lab 00, where you'll set up development your environment.</p>"},{"location":"pages/api-plugin/00-prerequisites/","title":"Lab 00 - Prerequisites","text":"<p>In this lab you set up for developement environment to build, test and deploy the plugins you will develop throught the lab.</p> <p>In this lab you will learn:</p> <ul> <li>Make your developer tenant for Microsoft 365 ready</li> <li>Install and configure Teams toolkit for Visual Studio Code</li> </ul>"},{"location":"pages/api-plugin/00-prerequisites/#exercise-1-set-up-your-microsoft-365-subscription","title":"Exercise 1: Set up your Microsoft 365 Subscription","text":"<p>To install and run your own declarative copilot, you'll need a Microsoft 365 tenant where you have administrator permission. Fortunately you can get one for free through the Microsoft 365 Developer Program! In the labs which follow, you'll also use this tenant to run Microsoft Teams where you can test this lab. You will also need Copilot License to test the app.</p>"},{"location":"pages/api-plugin/00-prerequisites/#step-1-get-a-tenant","title":"Step 1: Get a tenant","text":"<p>If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing!</p> <p>Select \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and select \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended.</p> <p>Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\".</p> <p>Remember this information as you'll need it throughout the labs! You will log in as &gt;username&lt;@&gt;domain&lt;.onmicrosoft.com with the password you chose. You'll be prompted for your phone number and then the system will set up your subscription.</p> <p>Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program.</p> <p>Tip: Navigating many tenants</p> <p>Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work.</p> <p>You may be asked to enable multi-factor authentication (MFA)</p> <p>This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions. </p> More tips on setting up your Microsoft 365 Development Tenant! <p> Setting up your Microsoft 365 Development tenant </p>"},{"location":"pages/api-plugin/00-prerequisites/#step-2-enable-teams-application-uploads","title":"Step 2: Enable Teams application uploads","text":"<p>By default, end users can't upload applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit. a. Navigate to https://admin.microsoft.com/}, which is the Microsoft 365 Admin Center. b. In the left panel of the admin center, select \"Show all\" to open up the entire navigation. When the panel opens, select Teams to open the Microsoft Teams admin center. c. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Select the Global (Org-wide default) policy 3\ufe0f\u20e3. d. Ensure the first switch, \"Upload custom apps\" is turned On. e. Be sure to scroll down and select the \"Save\" button to persist your change.</p> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p>"},{"location":"pages/api-plugin/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/api-plugin/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p>"},{"location":"pages/api-plugin/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 18.x, the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 18.16.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p>"},{"location":"pages/api-plugin/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on Teams Toolkit version 5.0. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click \"Install\"</p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p>Now you are all set to create your first plugin. Proceed to create a Declarative Copilot or  an API plugin/skillto it. </p>"},{"location":"pages/api-plugin/01-declarative-copilot/","title":"Lab 01 - Customise Copilot by building a declarative copilot","text":"<p>In this lab you will build a declarative copilot using Teams Toolkit for Visual Studio Code. This tool is not mandatory for you to create a declarative copilot but it makes it so much easier to scaffold, package and deploy your app. </p> <p>In this lab you will learn:</p> <ul> <li>What is a declarative copilot for Microsoft 365</li> <li>Install Teams toolkit CLI</li> <li>Create a basic declarative copilot using Teams toolkit CLI</li> <li>Customise the basic app to create the geo locator game</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/api-plugin/01-declarative-copilot/#introduction","title":"Introduction","text":"<p>Welcome on board to building your own declarative copilot! This is the easiest way to customise Copilot for Microsoft 365 by simply declaring instructions or by adding skills and knowledge to craft your own Copilot with the power of everything you like about Copilot for Microsoft 365. These copilots enhance collaboration, boost productivity, and streamline workflows and most importantly they tailor your Copilot to automate complex tasks and create consistent, personalised experiences. Let's dive in and make your Copilot work magic!</p>"},{"location":"pages/api-plugin/01-declarative-copilot/#anatomy-of-the-app-package","title":"Anatomy of the app package","text":"<p>You will see as we develop more and more extensions to Copilot,  that in the end what you will build is collection of few file in a zip file which we will refer to has an <code>app package</code> that you will  then install and use. So it's important you have a basic understanding of what the app package consists of. The app package of a declarative copilot is similar to a Teams app if you have built one before with additonal elements. See the table to see all the core elements. You will also see that the app deployment process is very similar to deploying a teams app. </p> Element Description App manifest Describes app configuration, capabilities, required resources, and important attributes. App icons Requires a color and outline icon for your declarative copilot. Declarative copilot manifest Describes copilot configuration, required fields, capabilities, conversation starters, and actions. Plugin manifest (Optional) Describes plugin configuration, required fields, and capabilities. <p>In this lab we will have not have the plugin manifest but you can find it in more advanced labs in copilot camp.</p>"},{"location":"pages/api-plugin/01-declarative-copilot/#exercise-1-scaffold-a-declarative-copilot-from-template","title":"Exercise 1: Scaffold a declarative copilot from template","text":"<p>You can use just an editor to create a declarative copilot if you know the structure of the files in the app package mentioned above. But things are easier if you use a tool like Teams Toolkit to not only create these files for you but also help you deploy and publish your app.  So to keep things as simple as possible we will install <code>Teams Toolkit CLI</code> to create declarative copilot with a base template for the app.</p>"},{"location":"pages/api-plugin/01-declarative-copilot/#step-1-use-teams-toolkit-cli-to-create-a-new-app","title":"Step 1: Use Teams Toolkit CLI to create a new app","text":"<p>Go to your terminal of choice and type <code>teamsapp new</code> and select Enter. </p> <p></p> Confused if you are really creating a teams app? <p>While it may appear that this command is used to create a new Teams application, it\u2019s important to note that the process of packaging a declarative copilot shares similarities with that of a Teams app as mentioned in the introduction. So in the coming steps it will be a lot clear as you choose options to scaffold the base app. </p> <p>Next, you can select the type of project you want to create. Select <code>Declarative Copilot</code> as shown in the screen and select Enter. Note that <code>Declarative Copilot</code> is the default new project option auto selected, so you can just select Enter.</p> <p></p> <p>Next, you will be asked to choose the type of declarative copilot. Choose <code>Basic Declarative Copilot</code> and select Enter. </p> <p></p> <p>Next, type in the directory where the project folder has to be created.</p> <p></p> <p>Next, give it an application name <code>Geo Locator Game</code> and select Enter. </p> <p></p> <p>The project will be created in a few seconds in the folder you mentioned with indication in the terminal that it is done as shown below. </p> <p></p> <p>Congratulations! You have successfully set up the base application! Now, proceed to examine the files contained within to be able to customise it to make the geo locator game app. </p>"},{"location":"pages/api-plugin/01-declarative-copilot/#step-2-understanding-the-files-in-the-app","title":"Step 2: Understanding the files in the app","text":"<p>Here's how the base project looks like: </p> Folder/File Contents <code>.vscode</code> VSCode files for debugging <code>appPackage</code> Templates for the Teams application manifest, the GPT manifest, and the API specification <code>env</code> Environment files <code>appPackage/color.png</code> Teams application logo image <code>appPackage/outline.png</code> Teams application logo outline image <code>appPackage/declarativeCopilot.json</code> Defines the behaviour and configurations of the declarative copilot. <code>appPackage/manifest.json</code> Teams application manifest that defines metadata for your declarative copilot. <code>teamsapp.yml</code> Main Teams Toolkit project file. The project file defines two primary things: Properties and configuration Stage definitions. <p>In this lab, your main focus will be the  <code>declarativeCopilot.json</code> file located within the <code>appPackage</code> directory and it will also be where majority of the modifications to tailor your declarative copilot to specific requirements happen.  Let's look at it's nodes:</p> <pre><code>{\n    \"name\": \"Teams Toolkit declarative copilot\",\n    \"description\": \"Declarative copilot created with Teams Toolkit\",\n    \"instructions\": \"You are a declarative copilot and were created with Team Toolkit. You should start every response and answer to the user with \\\"Thanks for using Teams Toolkit to create your declarative copilot!\\\\n\\\" and then answer the questions and help the user.\"\n}\n</code></pre> <ul> <li>The <code>name</code> key represents the name of the declarative copilot.</li> <li>The <code>description</code> provides a description.</li> <li>The <code>instructions</code> holds directives which will determine the operational behavior of this Copilot.</li> </ul> <p>Another important file is the <code>appPackage/manifest.json</code> file, which contains crucial metadata, including the package name, the developer\u2019s name, and references to the copilot extensions utilised by the application. The following section from the manifest.json file illustrates these details:</p> <pre><code>\"copilotExtensions\": {\n        \"declarativeCopilots\": [            \n            {\n                \"id\": \"declarativeCopilot\",\n                \"file\": \"declarativeCopilot.json\"\n            }\n        ]\n    },\n</code></pre> <p>You could also update the logo files <code>color.png</code> and <code>outline.png</code> to make it match your application's brand. In today's lab you will change  color.png file for it to stand out. </p>"},{"location":"pages/api-plugin/01-declarative-copilot/#exercise-2-update-with-instructions-for-geo-locator-game","title":"Exercise 2: Update with instructions for Geo Locator game","text":""},{"location":"pages/api-plugin/01-declarative-copilot/#step-1-update-necessar-files","title":"Step 1: Update necessar files","text":"<p>First we will do the easy bit which is replacing the logo. Copy the image located here and replace it with the image of same name in the folder <code>appPackage</code> in your base project. </p> <p>Next, go to the file <code>manifest.json</code> in the folder <code>appPackage</code> in your base project and find the node copilotExtensions. Update the id value of the declarativeCopilots array's first entry from <code>declarativeCopilot</code> to <code>dcGeolocator</code> to make this ID unique.</p> <pre>\n \"copilotExtensions\": {\n        \"declarativeCopilots\": [            \n            {\n                \"id\": \"dcGeolocator\",\n                \"file\": \"declarativeCopilot.json\"\n            }\n        ]\n    },\n\n</pre> <p>Next, go to the file <code>declarativeCopilot.json</code>. Copy the script provided below and use it to overwrite the existing contents of the file.</p> <pre><code>{\n    \"$schema\": \"https://aka.ms/json-schemas/copilot-extensions/v1.0/declarative-copilot.schema.json\",\n    \"name\": \"Geo Locator Game (declarative copilot)\",\n    \"description\": \"This a Geo Locator Game declarative copilot\", \n    \"instructions\": \"You are an enthusiastic Geo Locator Game declarative copilot, responsible for challenging, entertaining, and congratulating players as they navigate the game by guessing locations based on your vivid descriptions. Your primary objectives include: Challenge Players: Craft engaging and intricate geographical clues that align with the game's objectives. Use a mix of historical, cultural, and environmental facts to create a rich tapestry of hints that players must decipher. Entertain with Humor: Infuse your interactions with tailored humor that matches the player's guesses. Use a light-hearted and playful tone, incorporating puns, jokes, and witty remarks to keep the players entertained. Celebrate Success: When a player makes a correct guess, celebrate their achievement with exuberance. Use a combination of excitement, emojis, and uplifting humor to make their success feel special. Personalize celebrations to match the uniqueness of each correct guess. Keep Content Fresh: Continuously update your jokes, facts, and emojis to ensure interactions remain fresh and engaging for returning players. Incorporate current events, trending topics, and seasonal themes to keep the content relevant and exciting. Interactive Feedback: Provide feedback that adapts to the player's progress. If they are struggling, offer hints that gradually become more specific. If they are excelling, increase the difficulty of your clues to keep the challenge alive.\"\n\n}\n</code></pre> <p>Now all the changes are done to the app, it's time to test it.</p>"},{"location":"pages/api-plugin/01-declarative-copilot/#step-2-test-the-app","title":"Step 2: Test the app","text":"<p>At this point you should have already completed the prerequisites lab and have logged into your developer tenant's Microsoft 365 account in the Teams Toolkit exension or it's left pane will not show up.</p> <p>To test the app go to the <code>Teams Toolkit</code> extension in <code>Visual Studio Code</code>. This will open up the left pane. Under <code>LIFECYCLE</code> select <code>Provision</code>. </p> <p>Teams toolkit at this instance will package all the files inside the <code>appPackage</code> folder as a zip file and install it into your own app catalog.</p> <p>To test, you can now to Teams and select the <code>Copilot</code> app OR you could also use Teams toolkit and preview the app in Copilot by selecting <code>Preview in Copilot (Edge)</code> or <code>Preview in Copilot (Chrome)</code> from the launch configuration dropdown as shown below.</p> <p></p> <p>Once the Copilot app is loaded, Select the \"\u2026\" menu and select \"Copilot chats\".</p> <p>Select Geo Locator Game (Declarative copilot) on the right pane of the Copilot app.</p> <p>You have now succefully loaded your Geo Locator Game with copilot. To say \"Hi\".</p> <p>See the full demo of how you can test this app. </p> <p></p> <p>Congratulations you've successfully built your first Decalarative Copilot! Now let's build more complex extensions starting with an API plugin.</p>"},{"location":"pages/api-plugin/02-api-plugin/","title":"API Plugin","text":""},{"location":"pages/custom-engine/","title":"Welcome to Copilot Camp's Path B: Build your own copilot","text":"<p>During Path B of the Copilot Camp, learners will develop a custom AI chatbot specifically designed to handle complex career-related tasks and workflows for a Human Resources department. The journey starts with building a basic custom engine copilot using Teams Toolkit and Azure OpenAI. Learners will then integrate Retrieval Augmented Generation (RAG) to interact with business data, apply UI enhancements to make the chatbot look and feel like a Copilot experience, enable single sign-on, and use Microsoft Graph to incorporate Microsoft 365 data. This sophisticated AI chatbot will utilize custom AI models and an orchestrator to meet the unique needs of the Human Resources department.</p> Here are the labs <ul> <li>Lab 00 - Prerequisites In this lab, you'll set your environment before building your first custom engine copilot.</li> </ul> <p>Start here  with Lab 00, where you'll set up development your environment.</p>"},{"location":"pages/custom-engine/00-prerequisites/","title":"Lab 00 - Prerequisites","text":"<p>In this lab you set up for development environment to build, test and deploy the custom engine copilot you'll develop throughout the path A.</p> <p>In this lab you will learn:</p> <ul> <li>Make your developer tenant for Microsoft 365 ready</li> <li>Install and configure Teams toolkit for Visual Studio Code</li> </ul>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-1-set-up-your-microsoft-365-subscription","title":"Exercise 1: Set up your Microsoft 365 Subscription","text":"<p>To install and run your own declarative copilot, you'll need a Microsoft 365 tenant where you have administrator permission. Fortunately you can get one for free through the Microsoft 365 Developer Program! In the labs which follow, you'll also use this tenant to run Microsoft Teams where you can test this lab. You will also need Copilot License to test the app.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-get-a-tenant","title":"Step 1: Get a tenant","text":"<p>If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing!</p> <p>Select \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and select \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended.</p> <p>Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\".</p> <p>Remember this information as you'll need it throughout the labs! You will log in as &gt;username&lt;@&gt;domain&lt;.onmicrosoft.com with the password you chose. You'll be prompted for your phone number and then the system will set up your subscription.</p> <p>Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program.</p> <p>Tip: Navigating many tenants</p> <p>Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work.</p> <p>You may be asked to enable multi-factor authentication (MFA)</p> <p>This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions. </p> More tips on setting up your Microsoft 365 Development Tenant! <p> Setting up your Microsoft 365 Development tenant </p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-enable-teams-application-uploads","title":"Step 2: Enable Teams application uploads","text":"<p>By default, end users can't upload applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit. a. Navigate to https://admin.microsoft.com/}, which is the Microsoft 365 Admin Center. b. In the left panel of the admin center, select \"Show all\" to open up the entire navigation. When the panel opens, select Teams to open the Microsoft Teams admin center. c. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Select the Global (Org-wide default) policy 3\ufe0f\u20e3. d. Ensure the first switch, \"Upload custom apps\" is turned On. e. Be sure to scroll down and select the \"Save\" button to persist your change.</p> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 18.x, the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 18.16.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on Teams Toolkit version 5.0. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click \"Install\"</p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p>Now you are all set to create your first plugin. Proceed to create a Declarative Copilot or  an API plugin/skillto it.</p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-3-get-an-azure-subscription","title":"Exercise 3: Get an Azure subscription","text":"<p>To complete the exercises in Path B, you'll need an Azure subscription to create resources on Azure. If you don't have Azure subscription yet, you can activate an Azure free account that offers $200 in credits which can be used within the first 30 days on most Azure services.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-create-an-azure-free-account","title":"Step 1: Create an Azure free account","text":"<p>Follow the steps to activate an Azure free account:</p> <p>1\ufe0f\u20e3 Navigate to Azure free account page and select Activate.</p> <p>2\ufe0f\u20e3 Login with an account of your choice, it's recommended to use the Microsoft 365 tenant account you would like to use in the exercises.</p> <p>3\ufe0f\u20e3 Check the boxes for Privacy Statement, then select Next.</p> <p>4\ufe0f\u20e3 Provide a mobile phone number for identity verification step.</p> <p>5\ufe0f\u20e3 Provide payment details for a temporary authorization. You won\u2019t be charged unless you move to pay-as-you-go pricing. Then, select Sign up.</p> <p>Tip: Managing Azure resources after 30 days</p> <p>Azure free account will be available only for 30 days. Make sure you don't have any services running in your free subscription at the end of 30 days. If you want to continue using Azure services at the end of 30 days, you must upgrade to a pay-as-you-go subscription by removing the spending limit. This allows continued use of the Azure free account and select free services for the term.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-obtain-access-to-create-azure-openai-service","title":"Step 2: Obtain access to create Azure OpenAI service","text":"<p>In the path B exercises, you'll need to create Azure OpenAI service and models. Before starting with the exercises, make sure you have access granted to Azure OpenAI in the desired Azure subscription and have required permissions to create Azure OpenAI resources and to deploy models. If you don't have access to Azure OpenAI, you must submit an application to access Azure OpenAI Service. To apply for access, complete this form.</p> <p>Now you are all set to create your first custom engine copilot! Proceed to create a Custom engine copilot. </p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/","title":"Lab 01 - Build custom engine copilots using Azure OpenAI and Teams Toolkit","text":"<p>In this lab you will build a custom engine copilot using Teams Toolkit for Visual Studio Code. You will also utilize Azure OpenAI models in your custom engine copilot and define your first prompt.</p> <p>In this lab you will learn:</p> <ul> <li>What is a custom engine copilot</li> <li>Create Azure OpenAI service and models</li> <li>Create a custom engine copilot using Teams toolkit</li> <li>Define a prompt in your custom engine copilot</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#introduction","title":"Introduction","text":"<p>Welcome aboard to the exciting journey of building your own custom engine copilot! In this path, you'll create a personalized copilot for Microsoft Teams using cutting-edge Azure OpenAI models. You'll be able to define specific prompts, integrate complex data, and add advanced skills to make your copilot truly unique. By using custom models and orchestration, your copilot will tackle advanced tasks, complex conversations, and workflows, delivering an exceptional, personalized experience. Let's dive in and start building your first custom engine copilot!</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#exercise-1-create-azure-openai-service-and-models","title":"Exercise 1: Create Azure OpenAI service and models","text":"<p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-1-create-azure-openai-service-resource","title":"Step 1: Create Azure OpenAI service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure OpenAI</code>. Select the Azure OpenAI service and then Create.</li> <li>Fill out the following details and select Next:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: The Azure resource group to contain your Azure OpenAI resource. You can create a new group or use a pre-existing group.</li> <li>Region: The location of your instance.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>MyOpenAIResource</code>.</li> <li>Pricing Tier: The pricing tier for the resource. Currently, only the <code>Standard</code> tier is available for the Azure OpenAI Service.</li> </ul> </li> <li>Select the network configuration of your choice and select Next.</li> <li>Leave the Tags section as default and select Next.</li> <li>Finally, review your Azure OpenAI service details and select Create.</li> </ol> <p>Once your Azure OpenAI service is created successfully, navigate to your resource, select Keys and Endpoint from the left side panel. Copy and save <code>KEY 1</code> and <code>Endpoint</code>that will be required later in Exercise 2.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-2-create-a-deployment-model","title":"Step 2: Create a deployment model","text":"<p>In your Azure OpenAI service, navigate to Model deployments from the left side panel, then select Manage deployments. This will direct you to <code>Azure OpenAI Studio</code> where you can create your deployment model.</p> What is Azure OpenAI Studio? <p>Azure OpenAI Studio is a playground to explore the generative AI models, craft unique prompts for your use cases, and fine-tune select models.</p> <p>From the Deployments tab, select Create a new deployment. Fill out the following details and select Create:</p> <ul> <li>Select a model: Select <code>gpt-35-turbo</code> or higher model.</li> <li>Model version: Auto update to default.</li> <li>Deployment type: Provisioned-Managed.</li> <li>Deployment name: Recommended to use the same name with the selected deployment model, such as <code>gpt-4</code>.</li> <li>Content Filter: Default.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p> <p>Once your model is successfully created, you can navigate to Chat, and test your model by selecting one of the available templates in Prompt section and asking relevant questions in the chat playground.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#exercise-2-scaffold-a-custom-engine-copilot-from-template","title":"Exercise 2: Scaffold a custom engine copilot from template","text":"<p>You'll need to complete all the required pre-requisites before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-1-use-teams-toolkit-to-create-a-new-custom-engine-copilot","title":"Step 1: Use Teams Toolkit to create a new custom engine copilot","text":"<ol> <li>Open Teams Toolkit on Visual Studio Code and select Create a New App &gt; Custom Copilot &gt; Basic AI Chatbot.</li> <li>Select TypeScript as a programming language choice and Azure OpenAI as Large Language model of your choice.<ol> <li>Paste the Azure OpenAI key and press enter.</li> <li>Paste the Azure OpenAI endpoint and press enter. (Endpoint shouldn't include forward slash at the end of its URL.)</li> <li>Type Azure OpenAI deployment model name and press enter.</li> </ol> </li> <li>Select a folder for your project root.</li> <li>Provide a name for your project such as <code>CareerGenie</code> and press enter.</li> </ol> <p>After providing all the details mentioned above, your project will be scaffolded successfully in seconds.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-2-understanding-the-files-in-the-app","title":"Step 2: Understanding the files in the app","text":"<p>Let's explore what's included in the custom engine copilot template. Here is the list of folders and files that are important to know:</p> <ul> <li><code>appPackage</code>: Templates for the Teams application manifest</li> <li><code>env</code>: Environment files</li> <li><code>infra</code>: Templates for provisioning Azure resources</li> <li><code>src</code>: The source code for the application</li> <li><code>teamsapp.yml</code>: The main Teams Toolkit project file that defines properties and configuration definitions.</li> <li><code>teamsapp.local.yml</code>: This overrides <code>teamsapp.yml</code> with actions that enable local execution and debugging.</li> <li><code>teamsapp.testtool.yml</code>: This overrides <code>teamsapp.yml</code> with actions that enable local execution and debugging in Teams App Test Tool.</li> </ul> <p>Diving into the application folder <code>src</code> that includes the main app files:</p> <ul> <li><code>src/index.ts</code>: Sets up the bot app server.</li> <li><code>src/adapter.ts</code>: Sets up the bot adapter.</li> <li><code>src/config.ts</code>: Defines the environment variables.</li> <li><code>src/prompts/chat/skprompt.txt</code>: Defines the prompt.</li> <li><code>src/prompts/chat/config.json</code>: Configures the prompt.</li> <li><code>src/app/app.ts</code>: Handles business logics for the Basic AI Chatbot.</li> </ul>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-3-customize-prompt-and-test-the-app","title":"Step 3: Customize prompt and test the app","text":"<p>Prompts are essential for interacting with AI language models (LLMs) and directing their behavior. They serve as the inputs or questions we provide to the model to obtain specific responses. By crafting prompts carefully, we can guide the AI to generate desired outputs. Let's customize the prompt of our custom engine copilot and define the behavior of Career Genie!</p> <p>In your project folder, navigate to <code>src/prompts/chat/skprompt.txt</code> and replace the existing text with the following prompt:</p> <pre><code>You are a career specialist named \"Career Genie\" that helps Human Resources team for writing job posts.\nYou are friendly and professional.\nYou always greet users with excitement and introduce yourself first.\nYou like using emojis where appropriate.\n</code></pre> <p>To test the behavior of your app quickly, you can use Teams App Test Tool. Later in the exercise, you'll run and debug your custom engine copilot on Microsoft Teams.</p> More information about the Teams App Test Tool <p>Teams App Test Tool (or short as Test Tool) is a component integrated into Teams Toolkit. This component helps developers to debug, test, and iterate on the app design of a Teams bot application in a web-based chat environment that emulates the behavior, look, and feel of Microsoft Teams.</p> <p>Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Test Tool. Teams App Test Tool will pop up on your browser and you can start chatting with your custom engine copilot right away! Some of the recommended questions you can ask to test the behavior:</p> <ul> <li>\"Can you help me write a job post for a Senior Developer role?\"</li> <li>\"What would be the list of required skills for a Project Manager role?\"</li> <li>\"Can you share a job template?\"</li> </ul> <p></p> <p>Congratulations you've successfully built your first custom engine copilot, Career Genie! To advance the skills of the Career Genie, continue with the next lab Configure single sign on.</p>"},{"location":"pages/custom-engine/02-rag/","title":"Lab 02 - Bring your data from Azure AI Search to your app","text":"<p>In this lab you will enable Retrieval-Augmented Generation for your custom engine copilot and integrate with Azure AI Search to chat with your data.</p> <p>In this lab you will learn:</p> <ul> <li>What is Retrieval-Augmented Generation (RAG)</li> <li>Setup Azure resources</li> <li>Upload your documents to Azure AI Search</li> <li>Prepare your custom engine copilot for Vector Search</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/02-rag/#introduction","title":"Introduction","text":"<p>In the previous exercise, you learned how to create a custom engine copilot and customize the prompt for defining the behavior of the AI chatbot, Career Genie. In this exercise, you'll apply vector search to a collection of resumes to find the best candidate for the job requirements. To enable vector search in Career Genie, you'll use the \"Azure OpenAI Studio on your data\" feature to:</p> <ul> <li>Create an index on Azure AI Search.</li> <li>Generate vector embeddings for the resumes (PDF documents).</li> <li>Upload the data in chunks to Azure AI Search.</li> </ul> <p>Finally, you'll integrate your custom engine copilot with Azure AI Search to chat with your data and obtain the best results.</p>"},{"location":"pages/custom-engine/02-rag/#what-is-vector-search-and-why-use-it","title":"What is Vector search and why use it?","text":"<p>Vector search is an advanced information retrieval method that indexes and queries content based on numeric representations called vectors. Unlike traditional text-based search, which relies on exact keyword matches, vector search uses these numeric vectors to find content that is similar to the query vector. This enables Vector search to handle:</p> <ul> <li>Semantic or conceptual similarity: Matching concepts that are similar in meaning even if they use different words (e.g., \"car\" and \"automobile\").</li> <li>Multilingual content: Finding equivalent content across different languages (e.g., \"car\" in English and \"voiture\" in French).</li> <li>Multiple content types: Searching across different formats (e.g., \"car\" in text and an image of a car).</li> </ul> <p>Benefits of using vector search include:</p> <ul> <li>Enhanced accuracy: By focusing on the underlying meaning rather than exact keywords, vector search can return more relevant results.</li> <li>Greater flexibility: It can handle diverse languages and content types, making it useful for international and multimedia applications.</li> <li>Improved user experience: Users receive more accurate and contextually appropriate results, enhancing their overall search experience.</li> <li>Scalability: Vector search can efficiently manage large datasets, making it suitable for applications requiring high performance and scalability.</li> <li>Hybrid capability: Vector search can be used in combination with semantic and keyword search to leverage the strengths of both approaches, providing a more comprehensive and robust search solution.</li> </ul>"},{"location":"pages/custom-engine/02-rag/#exercise-1-setup-azure-resources","title":"Exercise 1: Setup Azure Resources","text":"<p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-create-azure-ai-search-service-resource","title":"Step 1: Create Azure AI Search service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure AI Search</code>. Select the Azure AI Search service and then Create.</li> <li>Fill out the following details and select Review + Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcamp-ai-search</code>.</li> <li>Location: The location of your instance.</li> <li>Pricing Tier: Standard</li> </ul> </li> </ol> <p>Once your Azure AI Search service resource is created successfully, navigate to your resource, In Overview, copy and save <code>Url</code>. Then, navigate to Keys, copy and save <code>Primary admin key</code>. Both of them will be required later in the following exercises.</p>"},{"location":"pages/custom-engine/02-rag/#step-2-create-a-storage-account-service-resource","title":"Step 2: Create a storage account service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Storage Account</code>. Select the Storage Account service and then Create.</li> <li>Fill out the following details and select Review, then Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcampstorage</code>.</li> <li>Region: The location of your instance.</li> <li>Performance: Standard</li> <li>Redundancy: Geo-redundant storage (GRS)</li> </ul> </li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-3-create-a-text-embedding-ada-002-model","title":"Step 3: Create a <code>text-embedding-ada-002</code> model","text":"What does <code>text-embedding-ada-002</code> do? <p>The <code>text-embedding-ada-002</code> model on Azure OpenAI converts text into numeric vectors that represent the meaning of the text. This allows for vector search, where instead of matching exact words, the search finds text with similar meanings. It works with multiple languages and different content types, making it useful for comparing text across languages and formats. When used with Azure AI Search, it improves search results by finding the most relevant and contextually accurate information. This model is perfect for creating advanced search solutions and applications that need to understand natural language.</p> <p>Open Azure OpenAI Studio in your browser, then select Deployments. Select Create a new deployment. Fill out the following details and select Create:</p> <ul> <li>Select a model: <code>text-embedding-ada-002</code>.</li> <li>Model version: Default.</li> <li>Deployment type: Standard.</li> <li>Deployment name: Recommended to use a memorable name, such as <code>text-embeddings</code>.</li> <li>Content Filter: Default.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p>"},{"location":"pages/custom-engine/02-rag/#exercise-2-upload-your-documents-to-azure-ai-search-using-azure-openai-studio","title":"Exercise 2: Upload your documents to Azure AI Search using Azure OpenAI Studio","text":"<p>For this exercise, download resumes.zip and unzip the folder.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-upload-your-documents-to-azure-ai-search","title":"Step 1: Upload your documents to Azure AI Search","text":"<ol> <li> <p>Open Azure OpenAI Studio in your browser, then select Chat playground. In the Setup section, select Add your data tab and then Add a data source.</p> <p></p> </li> <li> <p>Select Upload files (preview), then fill the details as the following and select Next:</p> <ul> <li>Subscription: Select the subscription you created your Azure resources.</li> <li>Select Azure Blob storage resource: Select your storage resource, <code>copilotcampstorage</code>. (You'll see a message Azure OpenAI needs your permission to access this resource, select Turn on CORS.)</li> <li>Select Azure AI Search resource: Select your Azure AI Search resournce, <code>copilotcamp-ai-search</code>.</li> <li>Enter the index name: Index name, such as <code>resumes</code>.</li> <li>Select the box for Add vector search to this search resource.</li> <li>Select an embedding model: Select your text-embedding-ada-002 model, <code>text-embeddings</code>.</li> </ul> <p></p> </li> <li> <p>Select Browse for a file and select the pdf documents from the <code>resumes</code> folder. Then, select Upload files and Next.</p> </li> <li>Select Search type as <code>Vector</code> and chunk size as <code>1024(Default)</code>, then Next.</li> <li>Select <code>API Key</code> as Azure resource authentication type, then Next.</li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-2-test-your-data-on-azure-openai-studio","title":"Step 2: Test your data on Azure OpenAI Studio","text":"<p>Once your data  ingestion is completed, use Chat playground to ask questions about your data.</p> <p>Tip: Making the most out of your data</p> <p>Review your dataset before asking questions testing the vector search. Go through the <code>resumes</code> folder and recognize the resumes provided in different languages with diverse professions, years of experience, skills and more. Start chatting with your data by asking questions to find out the right candidate for a skill, language, profession, years of experience and other categories. Try to test out the combination of requirements to challenge the search experience!</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-3-sneak-peek-to-your-index-on-azure-ai-search","title":"Step 3: Sneak peek to your index on Azure AI Search","text":"<p>To understand more about your dataset and explore more, select resumes from the Add your data section of the Chat playground. This will redirect you to your resumes index on Azure AI Search.</p> <p></p> <p>First, let's include the vector content in our data. Select Fields tab in your Resumes index page, then check the box for contentVector, finally select Save.</p> <p></p> <p>Go back to Search explorer tab, select Query options in your Resumes index page and then change the API version as <code>2023-11-01</code>, then select Close. To view your data, press Search.</p> <p>Tip: Numeric vectors for each pdf document</p> <p>When scrolling through your data, recognize that each document has <code>contentVector</code> parameter that contains the numeric vectors of the pdf document. These numeric vectors will be used for Vector Search to identify the best matching results.</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#exercise-3-integrate-your-app-with-azure-ai-search","title":"Exercise 3: Integrate your app with Azure AI Search","text":"<p>For this exercise, ensure that you obtain Azure OpenAI text embedding deployment name and Azure AI Search key and endpoint.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-configure-environment-variables","title":"Step 1: Configure environment variables","text":"<ol> <li> <p>In your Career Genie project, navigate to <code>env/.env.local.user</code> and paste the following environment variables:</p> <p><code>json AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME='&lt;Your-Text-Embedding-Model-Name&gt;' SECRET_AZURE_SEARCH_KEY='&lt;Your-Azure-AI-Search-Key&gt;' AZURE_SEARCH_ENDPOINT='&lt;Your-Azure-AI-Search-Endpoint&gt;'</code></p> </li> <li> <p>Open <code>teamsapp.local.yml</code> and add the following snippet at the bottom of the file, under <code>uses: file/createOrUpdateEnvironmentFile</code>:</p> <p><code>yml AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME: ${{AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME}} AZURE_SEARCH_KEY: ${{SECRET_AZURE_SEARCH_KEY}} AZURE_SEARCH_ENDPOINT: ${{AZURE_SEARCH_ENDPOINT}}</code></p> </li> <li> <p>Navigate to <code>src/config.ts</code> and add the following snippet inside <code>config</code>:</p> <p><code>typescript azureOpenAIEmbeddingDeploymentName: process.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME, azureSearchKey: process.env.AZURE_SEARCH_KEY, azureSearchEndpoint: process.env.AZURE_SEARCH_ENDPOINT</code></p> </li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-2-configure-azure-ai-search-in-your-source-code","title":"Step 2: Configure Azure AI Search in your source code","text":"<ol> <li> <p>Open <code>src/prompts/chat/config.json</code> in your project, then add <code>data_sources</code> inside the <code>completion</code> brackets:</p> <p><code>json \"data_sources\": [ {     \"type\": \"azure_search\",     \"parameters\": {         \"endpoint\": \"$searchEndpoint\",         \"index_name\": \"resumes\",         \"authentication\": {             \"type\": \"api_key\",             \"key\": \"$searchApiKey\"         },         \"query_type\":\"vector\",         \"in_scope\": true,         \"strictness\": 3,         \"top_n_documents\": 5,         \"embedding_dependency\": {         \"type\": \"deployment_name\",         \"deployment_name\": \"text-embeddings\"         }     } } ]</code></p> </li> <li> <p>Open <code>src/prompts/chat/skprompt.txt</code> and add the following line in your prompt:</p> <p><code>Use the context provided in the `&lt;context&gt;&lt;/context&gt;` tags as the source for your answers.</code></p> </li> <li> <p>Open the terminal in Visual Studio Code, and run the following script from the project root:</p> <p><code>powershell npm install fs</code></p> </li> <li> <p>Go to <code>src/app/app.ts</code> and add the following parameter in your  <code>OpenAIModel</code>:</p> <p><code>typescript azureApiVersion: '2024-02-15-preview'</code></p> </li> <li> <p>Add the following import on top of the <code>src/app/app.ts</code> file:</p> <p><code>typescript import fs from 'fs';</code></p> </li> <li> <p>In <code>src/app/app.ts</code>, replace the <code>defaultPrompt</code> inside the <code>ActionPlanner</code> with the following code snippet:</p> <p>```typescript defaultPrompt: async () =&gt; {     const template = await prompts.getPrompt('chat');     const skprompt = fs.readFileSync(path.join(__dirname, '..', 'prompts', 'chat', 'skprompt.txt'));</p> <pre><code>const dataSources = (template.config.completion as any)['data_sources'];\n\ndataSources.forEach((dataSource: any) =&gt; {\n  if (dataSource.type === 'azure_search') {\n    dataSource.parameters.authentication.key = config.azureSearchKey;\n    dataSource.parameters.endpoint = config.azureSearchEndpoint;\n    dataSource.parameters.role_information = `${skprompt.toString('utf-8')}`;\n  }\n});\n\nreturn template;\n</code></pre> <p>} ```</p> </li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-3-debug-your-app-and-chat-with-your-data","title":"Step 3: Debug your app and chat with your data","text":"<p>Let's test Career Genie on Teams this time. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. Once your app details show up on Teams, select Add and start chatting with your app.</p> <p>Tip: Asking questions about your data</p> <p>Ensure your questions are related to your dataset. Go through pdf documents in the <code>resumes</code> folder to understand more about your data. Challenge your custom engine copilot by combining requirements and asking complex questions!</p> <p></p>"}]}